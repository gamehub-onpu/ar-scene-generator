{"version":3,"sources":["components/Header.tsx","components/Footer.tsx","ts/config.ts","ts/InputManager.ts","ts/output.ts","components/Final.tsx","components/Forms/PatternList.tsx","components/Forms/TableRow.tsx","components/Forms/Table.tsx","components/Forms/Form.tsx","App.tsx","index.tsx"],"names":["Header","className","href","download","onChange","e","console","log","target","value","React","Component","Footer","inputManager","prepared","patterns","this","patternName","push","outputHTMLConfig","Final","join","PatternList","props","state","patternListValues","Array","patternId","onInput","bind","event","preventDefault","files","name","addPattern","newElem","createElement","key","setState","type","id","htmlFor","TableRow","useState","fileName","updateFileName","musicfileName","updateMusicFileName","fileEntered","updateFileEntered","musicfileEntered","updateMusicFileEntered","updateContentType","newContentType","toLocaleLowerCase","onClick","checked","Table","tableRows","i","getPatterns","forEach","elem","newRow","Form","stage","length","codePrepared","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.64454b77.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Header extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"header\">\r\n        <div className=\"alert alert-dismissible alert-info\">\r\n          <strong>You can</strong> download all of the required libraries{\" \"}\r\n          <a\r\n            className=\"alert-link\"\r\n            href=\"./assets/libraries.zip\"\r\n            download=\"./assets/libraries.zip\"\r\n          >\r\n            here\r\n          </a>\r\n          .<br></br>\r\n          <strong>To read</strong> the documentation follow{\" \"}\r\n          <a\r\n            className=\"alert-link\"\r\n            href=\"https://github.com/saveniukoleg/ar-scene-generator/wiki\"\r\n          >\r\n            this link\r\n          </a>\r\n          .\r\n        </div>\r\n        <div className=\"language-select\">\r\n          <select\r\n            className=\"form-control\"\r\n            onChange={(e) => console.log(e.target.value)}\r\n          >\r\n            <option>UA</option>\r\n            <option>EU</option>\r\n            <option>RU</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport {SOME_TEXT} from '../ts/config';\r\n\r\nclass Footer extends React.Component {\r\n    render() {\r\n        return <div className='footer'>\r\n            <div className='alert alert-dismissible alert-info'>\r\n                {SOME_TEXT}\r\n            </div>\r\n        </div>;\r\n    }\r\n}\r\n\r\nexport default Footer;","const SOME_TEXT = \"Тут іде зразок тексту, який допоможе користувачеві зрозуміти програму. Богран повинен отримати текст для цього з документації та додати власні виправлення\";\r\n\r\nexport {SOME_TEXT};","class InputManager {\r\n    private prepared: boolean;\r\n    private patterns: Array<string>;\r\n\r\n    constructor() {\r\n        this.prepared = true;\r\n        this.patterns = [];\r\n    }\r\n\r\n    addPattern(patternName: string) {\r\n        this.patterns.push(patternName);\r\n    }\r\n\r\n    public get getPatterns() {\r\n        return this.patterns;\r\n    }\r\n\r\n    public get codePrepared() {\r\n        return this.prepared;\r\n    }\r\n}\r\n\r\nconst inputManager = new InputManager();\r\nexport default inputManager;","const outputHTMLConfig = [\r\n    `\r\n      <!DOCTYPE html>\r\n  \r\n      <head>\r\n          <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0\">\r\n          <title>AR project template</title>\r\n          <!-- include three.js library -->\r\n          <script src='js/three.js'></script>\r\n          <script src='js/OBJLoader.js'></script>\r\n          <script src='js/MTLLoader.js'></script>\r\n          <!-- include tween.js library -->\r\n          <script src=\"js/tween.umd.js\"></script>\r\n          <!-- include jsartookit -->\r\n          <script src=\"jsartoolkit5/artoolkit.min.js\"></script>\r\n          <script src=\"jsartoolkit5/artoolkit.api.js\"></script>\r\n          <!-- include threex.artoolkit -->\r\n          <script src=\"threex/threex-artoolkitsource.js\"></script>\r\n          <script src=\"threex/threex-artoolkitcontext.js\"></script>\r\n          <script src=\"threex/threex-arbasecontrols.js\"></script>\r\n          <script src=\"threex/threex-armarkercontrols.js\"></script>\r\n      </head>\r\n      \r\n      <body style='margin : 0px; overflow: hidden; font-family: Monospace;'>\r\n      \r\n          <!-- \r\n        Example based on the AR.js library and examples created by Jerome Etienne: https://github.com/jeromeetienne/AR.js/\r\n      -->\r\n      \r\n          <script>\r\n              var scene, camera, renderer, clock, deltaTime, totalTime;\r\n      \r\n              var arToolkitSource, arToolkitContext;\r\n      \r\n              var markerRoot, mainContainer;\r\n  \r\n              var audioContent = [];\r\n      \r\n              initialize();\r\n              animate();\r\n      \r\n              function initialize() {\r\n                  scene = new THREE.Scene();\r\n      \r\n                  let ambientLight = new THREE.AmbientLight(0xcccccc, 0.5);\r\n                  scene.add(ambientLight);\r\n      \r\n                  camera = new THREE.Camera();\r\n                  scene.add(camera);\r\n      \r\n                  renderer = new THREE.WebGLRenderer({\r\n                      antialias: true,\r\n                      alpha: true\r\n                  });\r\n                  renderer.setClearColor(new THREE.Color('lightgrey'), 0)\r\n                  renderer.setSize(640, 480);\r\n                  renderer.domElement.style.position = 'absolute'\r\n                  renderer.domElement.style.top = '0px'\r\n                  renderer.domElement.style.left = '0px'\r\n                  document.body.appendChild(renderer.domElement);\r\n      \r\n                  clock = new THREE.Clock();\r\n                  deltaTime = 0;\r\n                  totalTime = 0;\r\n      \r\n                  ////////////////////////////////////////////////////////////\r\n                  // setup arToolkitSource\r\n                  ////////////////////////////////////////////////////////////\r\n      \r\n                  arToolkitSource = new THREEx.ArToolkitSource({\r\n                      sourceType: 'webcam',\r\n                  });\r\n      \r\n                  function onResize() {\r\n                      arToolkitSource.onResize()\r\n                      arToolkitSource.copySizeTo(renderer.domElement)\r\n                      if (arToolkitContext.arController !== null) {\r\n                          arToolkitSource.copySizeTo(arToolkitContext.arController.canvas)\r\n                      }\r\n                  }\r\n      \r\n                  arToolkitSource.init(function onReady() {\r\n                      onResize()\r\n                  });\r\n      \r\n                  // handle resize event\r\n                  window.addEventListener('resize', function () {\r\n                      onResize()\r\n                  });\r\n      \r\n                  ////////////////////////////////////////////////////////////\r\n                  // setup arToolkitContext\r\n                  ////////////////////////////////////////////////////////////\t\r\n      \r\n                  // create atToolkitContext\r\n                  arToolkitContext = new THREEx.ArToolkitContext({\r\n                      cameraParametersUrl: 'data/camera_para.dat',\r\n                      detectionMode: 'mono'\r\n                  });\r\n      \r\n                  // copy projection matrix to camera when initialization complete\r\n                  arToolkitContext.init(function onCompleted() {\r\n                      camera.projectionMatrix.copy(arToolkitContext.getProjectionMatrix());\r\n                  });\r\n      \r\n                  ////////////////////////////////////////////////////////////\r\n                  // setup markerRoots\r\n                  ////////////////////////////////////////////////////////////\r\n      \r\n                  // CUSTOM PART\r\n                  mainContainer = new THREE.Group();\r\n                  \r\n                  const patternNames = [`,\r\n    `];\r\n                  const modes = [`,\r\n    `];\r\n                  const modelFiles = [`,\r\n    `];\r\n                  const imageFiles = [`,\r\n    `];\r\n                  const videoFiles = [`,\r\n    `];\r\n                  const audioFiles = [`,\r\n    `];\r\n                    const repeatOptions = [`,\r\n    `];\r\n  \r\n                  const markerRoots = [];\r\n                  for (let i = 0; i < `,\r\n    `; i++) {\r\n                        markerRoots[i] = new THREE.Group();\r\n                  }\r\n  \r\n                  for (let i = 0; i < `,\r\n    `; i++) {\r\n                      mainContainer.add(markerRoots[i]);\r\n                      let markerControls1 = new THREEx.ArMarkerControls(arToolkitContext, markerRoots[i], {\r\n                          type: 'pattern', patternUrl: \\`\\${patternNames[i]}.patt\\`,\r\n                      })\r\n      \r\n                      switch (modes[i]) {\r\n                          case 'model':\r\n                              function onProgress(xhr) { console.log((xhr.loaded / xhr.total * 100) + '% loaded'); }\r\n                              function onError(xhr) { console.log('An error happened'); }\r\n      \r\n                              new THREE.MTLLoader()\r\n                                  .load(\\`\\${modelFiles[i]}.mtl\\`, function (materials) {\r\n                                      materials.preload();\r\n                                      new THREE.OBJLoader()\r\n                                          .setMaterials(materials)\r\n                                          .load(\\`\\${modelFiles[i]}.obj\\`, function (group) {\r\n                                              let mesh0 = group.children[0];\r\n                                              mesh0.material.side = THREE.DoubleSide;\r\n                                              mesh0.scale.set(0.05, 0.05, 0.05);\r\n  \r\n                                              mesh0.rotation.set(Math.PI / -2, 0, 0);\r\n      \r\n                                              markerRoots[i].add(mesh0);\r\n      \r\n                                          }, onProgress, onError);\r\n                                  });\r\n                              break;\r\n                          case 'image':\r\n                              let geometry1 = new THREE.PlaneBufferGeometry(1, 1, 4, 4);\r\n                              let loader = new THREE.TextureLoader();\r\n                              let texture = loader.load(\\`\\${imageFiles[i]}.png\\`, render);\r\n                              let material1 = new THREE.MeshBasicMaterial({ map: texture, side: THREE.DoubleSide });\r\n      \r\n                              mesh1 = new THREE.Mesh(geometry1, material1);\r\n                              mesh1.rotation.x = -Math.PI / 2;\r\n                              markerRoots[i].add(mesh1);\r\n                              break;\r\n                          case 'video':\r\n                              let geometry2 = new THREE.PlaneBufferGeometry(2, 2, 4, 4);\r\n      \r\n                              let video = document.createElement('video');\r\n                              video.src = \\`\\${videoFiles[i]}.mp4\\`;\r\n                              if (repeatOptions[i]) {\r\n                                  video.addEventListener('ended', () => {\r\n                                      video.play();\r\n                                  })\r\n                              }\r\n                              audioContent.push(video);\r\n                              let texture2 = new THREE.VideoTexture(video);\r\n                              texture2.minFilter = THREE.LinearFilter;\r\n                              texture2.magFilter = THREE.LinearFilter;\r\n                              texture2.format = THREE.RGBFormat;\r\n                              let material2 = new THREE.MeshBasicMaterial({ map: texture2 });\r\n      \r\n                              mesh2 = new THREE.Mesh(geometry2, material2);\r\n                              mesh2.rotation.x = -Math.PI / 2;\r\n      \r\n                              markerRoots[i].add(mesh2);\r\n                              break;\r\n                          default:\r\n                              let mesh = new THREE.Mesh(\r\n                                  new THREE.CubeGeometry(1, 1, 1),\r\n                                  new THREE.MeshBasicMaterial({ color: 'red', transparent: true, opacity: 0.5 })\r\n                              );\r\n                              mesh.position.y = 0.5;\r\n                              markerRoots[i].add(mesh);\r\n                              break;\r\n                      }\r\n      \r\n      \r\n                      if (audioFiles[i]) {\r\n                          const listener = new THREE.AudioListener();\r\n                          camera.add(listener);\r\n                          // create a global audio source\r\n                          const sound = new THREE.Audio(listener);\r\n                          audioContent.push(sound);\r\n                          // load a sound and set it as the Audio object's buffer\r\n                          const audioLoader = new THREE.AudioLoader();\r\n                          audioLoader.load(\\`\\${audioFiles[i]}.mp3\\`, function (buffer) {\r\n                              sound.setBuffer(buffer);\r\n                              if (repeatOptions[i]) {\r\n                                  sound.setLoop(true);\r\n                              }\r\n                              sound.setVolume(0.5);\r\n                          });\r\n                      }\r\n                  }\r\n      \r\n                  scene.add(mainContainer);\r\n              }\r\n      \r\n              function update() {\r\n                  // update artoolkit on every frame\r\n                  if (arToolkitSource.ready !== false) {\r\n                      arToolkitContext.update(arToolkitSource.domElement);\r\n                  }\r\n              }\r\n      \r\n              function render() {\r\n                  renderer.render(scene, camera);\r\n              }\r\n      \r\n      \r\n              function animate(time) {\r\n                  requestAnimationFrame(animate);\r\n                  deltaTime = clock.getDelta();\r\n                  totalTime += deltaTime;\r\n                  update();\r\n                  render();\r\n              }\r\n  \r\n              window.onload = () => {\r\n                  setTimeout(() => {\r\n                      for (let i = 0; i < audioContent.length; i++) {\r\n                          audioContent[i].play();\r\n                      }\r\n                  }, 100);\r\n              }\r\n      \r\n          </script>\r\n      \r\n      </body>\r\n      \r\n      </html>\r\n    `,\r\n];\r\n\r\nexport default outputHTMLConfig;","import outputHTMLConfig from \"../ts/output\";\r\n\r\nexport default function Final() {\r\n  function compileOutput() {\r\n    let str: string = \"\";\r\n    outputHTMLConfig.forEach((el) => {\r\n      str += el;\r\n    });\r\n    return str;\r\n  }\r\n\r\n  return (\r\n    <div className=\"final-output\">\r\n      <b>Згенерований код для вашої програми:</b>\r\n      <br></br>\r\n      <br></br>\r\n      {outputHTMLConfig.join(\"\\n\")}\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport inputManager from \"../../ts/InputManager\";\r\n\r\nexport default class PatternList extends Component {\r\n  state = {\r\n    patternListValues: Array(),\r\n    patternId: 0,\r\n  };\r\n\r\n  constructor(props: {}) {\r\n    super(props);\r\n    this.onInput = this.onInput.bind(this);\r\n  }\r\n\r\n  onInput(event: any) {\r\n    event.preventDefault();\r\n    if (!event.target.files[0]) return;\r\n    const name: string = event.target.files[0].name;\r\n    inputManager.addPattern(name);\r\n    const newElem = React.createElement(\r\n      \"li\",\r\n      {\r\n        className:\r\n          \"list-group-item d-flex justify-content-between align-items-center\",\r\n        key: this.state.patternId,\r\n      },\r\n      name\r\n    );\r\n    this.state.patternId++;\r\n    this.state.patternListValues.push(newElem);\r\n    this.setState({ patternListValues: this.state.patternListValues });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"pattern-list\">\r\n        <ul className=\"list-group\">{this.state.patternListValues}</ul>\r\n        <div className=\"custom-file pattern-file-input\">\r\n          <input\r\n            type=\"file\"\r\n            className=\"custom-file-input\"\r\n            id=\"inputGroupFile02\"\r\n            onInput={this.onInput}\r\n          ></input>\r\n          <label className=\"custom-file-label\" htmlFor=\"inputGroupFile02\">\r\n            Choose file\r\n          </label>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { useState } from \"react\";\r\n\r\nexport default function TableRow(props: { name: string; id: number }) {\r\n  const [fileName, updateFileName] = useState(\"\");\r\n  const [musicfileName, updateMusicFileName] = useState(\"\");\r\n\r\n  const [fileEntered, updateFileEntered] = useState(false);\r\n  const [musicfileEntered, updateMusicFileEntered] = useState(false);\r\n\r\n  const [contentType, updateContentType] = useState(\"image\");\r\n  const [autoRepeat, updateToggle] = useState();\r\n\r\n  function onInput(e: any) {\r\n    e.preventDefault();\r\n    updateFileName(e.target.files[0].name);\r\n    updateFileEntered(true);\r\n  }\r\n\r\n  function onMusicInput(e: any) {\r\n    e.preventDefault();\r\n    updateMusicFileName(e.target.files[0].name);\r\n    updateMusicFileEntered(true);\r\n  }\r\n\r\n  function updateCols(newContentType: string) {\r\n    updateContentType(newContentType);\r\n  }\r\n\r\n  function onCheckboxToggle(e: any) {\r\n    console.log(`Auto repeat of checkbox #${props.id}`, e.target.checked);\r\n  }\r\n\r\n  return (\r\n    <tr className=\"table-default\">\r\n      <td>{props.name}</td>\r\n      <td>\r\n        <select\r\n          className=\"form-control\"\r\n          onChange={(e) => updateCols(e.target.value.toLocaleLowerCase())}\r\n        >\r\n          <option>Image</option>\r\n          <option>Video</option>\r\n          <option>Model</option>\r\n        </select>\r\n      </td>\r\n      <td>\r\n        {fileEntered ? (\r\n          fileName\r\n        ) : (\r\n          <div className=\"custom-file\">\r\n            <input\r\n              type=\"file\"\r\n              className=\"custom-file-input content-file-input\"\r\n              id=\"inputGroupFile02\"\r\n              onInput={onInput}\r\n            ></input>\r\n            <label className=\"custom-file-label\" htmlFor=\"inputGroupFile02\">\r\n              Choose file\r\n            </label>\r\n          </div>\r\n        )}\r\n      </td>\r\n      <td>\r\n        {musicfileEntered ? (\r\n          musicfileName\r\n        ) : (\r\n          <div className=\"custom-file\">\r\n            <input\r\n              type=\"file\"\r\n              className=\"custom-file-input content-file-input\"\r\n              id=\"inputGroupFile02\"\r\n              onInput={onMusicInput}\r\n            ></input>\r\n            <label className=\"custom-file-label\" htmlFor=\"inputGroupFile02\">\r\n              Choose file\r\n            </label>\r\n          </div>\r\n        )}\r\n      </td>\r\n      <td>\r\n        <div className=\"custom-control custom-switch\">\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"custom-control-input\"\r\n            onClick={onCheckboxToggle}\r\n            id={`customSwitch${props.id}`}\r\n          ></input>\r\n          <label\r\n            className=\"custom-control-label\"\r\n            htmlFor={`customSwitch${props.id}`}\r\n          >\r\n            Toggle\r\n          </label>\r\n        </div>\r\n      </td>\r\n    </tr>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport inputManager from \"../../ts/InputManager\";\r\nimport TableRow from \"./TableRow\";\r\n\r\nexport default class Table extends Component {\r\n  state = {\r\n    tableRows: Array(),\r\n  };\r\n\r\n  componentDidMount() {\r\n    let i = 0;\r\n    this.state.tableRows.push(\r\n      <tr className=\"table-default\">\r\n        <td>\r\n          <b>Pattern file</b>\r\n        </td>\r\n        <td>\r\n          <b>Content type</b>\r\n        </td>\r\n        <td>\r\n          <b>Content file</b>\r\n        </td>\r\n        <td>\r\n          <b>Audio file</b>\r\n        </td>\r\n        <td>\r\n          <b>Auto repeat</b>\r\n        </td>\r\n      </tr>\r\n    );\r\n    inputManager.getPatterns.forEach((elem: string) => {\r\n      const newRow = <TableRow name={elem} id={i} />;\r\n      this.state.tableRows.push(newRow);\r\n      i++;\r\n    });\r\n    this.setState({ tableRows: this.state.tableRows });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"table-wrapper\">\r\n        <table className=\"table table-hover\">\r\n          <tbody>{this.state.tableRows}</tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport inputManager from \"../../ts/InputManager\";\r\nimport Final from \"../Final\";\r\nimport PatternList from \"./PatternList\";\r\nimport Table from \"./Table\";\r\n\r\nclass Form extends React.Component {\r\n  state = {\r\n    stage: \"pattern\",\r\n  };\r\n\r\n  constructor(props: {}) {\r\n    super(props);\r\n    this.onClick = this.onClick.bind(this);\r\n  }\r\n\r\n  onClick() {\r\n    if (!inputManager.getPatterns.length) return;\r\n    if (this.state.stage === \"pattern\") {\r\n      this.setState({ stage: \"table\" });\r\n    } else if (this.state.stage === \"table\" && inputManager.codePrepared) {\r\n      this.setState({ stage: \"final\" });\r\n      console.log(\"lol\");\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.stage === \"pattern\" ? (\r\n          <div className=\"main-pattern-instruction\">\r\n            Додайте новий файл паттерну або підтвердіть існуючі\r\n          </div>\r\n        ) : null}\r\n        {this.state.stage === \"table\" ? (\r\n          <Table />\r\n        ) : this.state.stage === \"pattern\" ? (\r\n          <PatternList />\r\n        ) : (\r\n          <Final />\r\n        )}\r\n        <div className=\"main-button\">\r\n          {this.state.stage === \"final\" ? null : (\r\n            <button className=\"btn btn-primary\" onClick={this.onClick}>\r\n              Submit\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport \"./css/bootstrap.css\";\r\nimport \"./css/main.css\";\r\nimport Header from \"./components/Header\";\r\nimport Footer from \"./components/Footer\";\r\nimport Form from \"./components/Forms/Form\";\r\nimport ProgressBar from \"./components/ProgressBar\";\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <Form />\r\n        <Footer />\r\n        {/* <ProgressBar /> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}