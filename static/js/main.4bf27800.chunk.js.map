{"version":3,"sources":["components/Header.tsx","ts/output.ts","ts/InputManager.ts","components/Final.tsx","components/Footer.tsx","components/Forms/PatternList.tsx","components/Forms/TableRow.tsx","components/Forms/Table.tsx","components/Form.tsx","App.tsx","index.tsx"],"names":["Header","className","href","onChange","e","console","log","target","value","React","Component","outputHTMLConfig","inputManager","prepared","patterns","barcodes","data","output","this","pattern","isNaN","push","updateType","newContent","id","mode","repeat","modifiedContent","slice","model","sound","video","image","index","i","getPatterns","length","barcode","patternNames","modes","modelFiles","imageFiles","videoFiles","audioFiles","repeatOptions","forEach","element","Final","useEffect","finalOutput","document","getElementById","code","compileData","innerText","style","whiteSpace","Footer","PatternList","props","state","patternListValues","Array","patternId","prepareOptions","options","marginTop","onInput","bind","event","preventDefault","files","name","addPattern","newElem","createElement","key","setState","type","htmlFor","TableRow","useState","fileName","updateFileName","musicfileName","updateMusicFileName","fileEntered","updateFileEntered","musicfileEntered","updateMusicFileEntered","contentType","updateContentType","newContentType","updateData","filename","onClick","checked","Table","tableRows","prepareData","elem","newRow","getBarcode","Form","stage","codePrepared","alert","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4bf27800.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Header extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"header\">\r\n        <div className=\"alert alert-dismissible alert-info\">\r\n          <strong>Ви можете</strong> завантажити всі необхідні бібліотеки{\" \"}\r\n          <a\r\n            className=\"alert-link\"\r\n            href=\"https://drive.google.com/u/0/uc?id=1mJgat4qDhj9fVxP9XVrlDdqTTM60itb6&export=download\"\r\n          >\r\n            тут\r\n          </a>\r\n          .<br></br>\r\n          <strong>Щоб прочитати</strong> документацію, перейдіть за{\" \"}\r\n          <a\r\n            className=\"alert-link\"\r\n            href=\"https://github.com/saveniukoleg/ar-scene-generator/\"\r\n          >\r\n            цим посиланням\r\n          </a>\r\n          .\r\n        </div>\r\n        <div className=\"language-select\">\r\n          <select\r\n            className=\"form-control\"\r\n            onChange={(e) => console.log(e.target.value)}\r\n          >\r\n            <option>UA</option>\r\n            <option>EU</option>\r\n            <option>RU</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","const outputHTMLConfig = [\r\n  `\r\n      <!DOCTYPE html>\r\n  \r\n      <head>\r\n          <meta name=\"viewport\" content=\"width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0\">\r\n          <title>AR project template</title>\r\n          <!-- include three.js library -->\r\n          <script src='js/three.js'></script>\r\n          <script src='js/OBJLoader.js'></script>\r\n          <script src='js/MTLLoader.js'></script>\r\n          <!-- include tween.js library -->\r\n          <script src=\"js/tween.umd.js\"></script>\r\n          <!-- include jsartookit -->\r\n          <script src=\"jsartoolkit5/artoolkit.min.js\"></script>\r\n          <script src=\"jsartoolkit5/artoolkit.api.js\"></script>\r\n          <!-- include threex.artoolkit -->\r\n          <script src=\"threex/threex-artoolkitsource.js\"></script>\r\n          <script src=\"threex/threex-artoolkitcontext.js\"></script>\r\n          <script src=\"threex/threex-arbasecontrols.js\"></script>\r\n          <script src=\"threex/threex-armarkercontrols.js\"></script>\r\n      </head>\r\n      \r\n      <body style='margin : 0px; overflow: hidden; font-family: Monospace;'>\r\n      \r\n          <!-- \r\n        Example based on the AR.js library and examples created by Jerome Etienne: https://github.com/jeromeetienne/AR.js/\r\n      -->\r\n      \r\n          <script>\r\n              var scene, camera, renderer, clock, deltaTime, totalTime;\r\n      \r\n              var arToolkitSource, arToolkitContext;\r\n      \r\n              var markerRoot, mainContainer;\r\n  \r\n              var audioContent = [];\r\n      \r\n              initialize();\r\n              animate();\r\n      \r\n              function initialize() {\r\n                  scene = new THREE.Scene();\r\n      \r\n                  let ambientLight = new THREE.AmbientLight(0xcccccc, 0.5);\r\n                  scene.add(ambientLight);\r\n      \r\n                  camera = new THREE.Camera();\r\n                  scene.add(camera);\r\n      \r\n                  renderer = new THREE.WebGLRenderer({\r\n                      antialias: true,\r\n                      alpha: true\r\n                  });\r\n                  renderer.setClearColor(new THREE.Color('lightgrey'), 0)\r\n                  renderer.setSize(640, 480);\r\n                  renderer.domElement.style.position = 'absolute'\r\n                  renderer.domElement.style.top = '0px'\r\n                  renderer.domElement.style.left = '0px'\r\n                  document.body.appendChild(renderer.domElement);\r\n      \r\n                  clock = new THREE.Clock();\r\n                  deltaTime = 0;\r\n                  totalTime = 0;\r\n      \r\n                  ////////////////////////////////////////////////////////////\r\n                  // setup arToolkitSource\r\n                  ////////////////////////////////////////////////////////////\r\n      \r\n                  arToolkitSource = new THREEx.ArToolkitSource({\r\n                      sourceType: 'webcam',\r\n                  });\r\n      \r\n                  function onResize() {\r\n                      arToolkitSource.onResize()\r\n                      arToolkitSource.copySizeTo(renderer.domElement)\r\n                      if (arToolkitContext.arController !== null) {\r\n                          arToolkitSource.copySizeTo(arToolkitContext.arController.canvas)\r\n                      }\r\n                  }\r\n      \r\n                  arToolkitSource.init(function onReady() {\r\n                      onResize()\r\n                  });\r\n      \r\n                  // handle resize event\r\n                  window.addEventListener('resize', function () {\r\n                      onResize()\r\n                  });\r\n      \r\n                  ////////////////////////////////////////////////////////////\r\n                  // setup arToolkitContext\r\n                  ////////////////////////////////////////////////////////////\t\r\n      \r\n                  // create atToolkitContext\r\n                  arToolkitContext = new THREEx.ArToolkitContext({\r\n                      cameraParametersUrl: 'data/camera_para.dat',\r\n                      detectionMode: 'mono_and_matrix',\r\n                      matrixCodeType: \"3x3\",\r\n                      maxDetectionRate: 60,\r\n                      canvasWidth: 640,\r\n                      canvasHeight: 480\r\n                  });\r\n      \r\n                  // copy projection matrix to camera when initialization complete\r\n                  arToolkitContext.init(function onCompleted() {\r\n                      camera.projectionMatrix.copy(arToolkitContext.getProjectionMatrix());\r\n                  });\r\n      \r\n                  ////////////////////////////////////////////////////////////\r\n                  // setup markerRoots\r\n                  ////////////////////////////////////////////////////////////\r\n      \r\n                  // CUSTOM PART\r\n                  mainContainer = new THREE.Group();\r\n                  \r\n                  const patternNames = [`,\r\n  `];\r\n                  const patternBarcode = [`,\r\n  `];\r\n                  const modes = [`,\r\n  `];\r\n                  const modelFiles = [`,\r\n  `];\r\n                  const imageFiles = [`,\r\n  `];\r\n                  const videoFiles = [`,\r\n  `];\r\n                  const audioFiles = [`,\r\n  `];\r\n                  const repeatOptions = [`,\r\n  `];\r\n  \r\n                  const markerRoots = [];\r\n                  for (let i = 0; i < `,\r\n  `; i++) {\r\n                        markerRoots[i] = new THREE.Group();\r\n                  }\r\n  \r\n                  for (let i = 0; i < `,\r\n  `; i++) {\r\n                    mainContainer.add(markerRoots[i]);\r\n                    if (patternBarcode[i] === -1) {\r\n                        let markerControls1 = new THREEx.ArMarkerControls(arToolkitContext, markerRoots[i], {\r\n                            type: 'pattern', patternUrl: patternNames[i],\r\n                        })\r\n                    } else {\r\n                        let markerControls1 = new THREEx.ArMarkerControls(arToolkitContext, markerRoots[i], {\r\n                            type: \"barcode\", barcodeValue: patternBarcode[i],\r\n                        })\r\n                    }\r\n    \r\n                    switch (modes[i]) {\r\n                        case 'model':\r\n                            function onProgress(xhr) { console.log((xhr.loaded / xhr.total * 100) + '% loaded'); }\r\n                            function onError(xhr) { console.log('An error happened'); }\r\n    \r\n                            new THREE.MTLLoader()\r\n                                .load(\\`\\${modelFiles[i]}.mtl\\`, function (materials) {\r\n                                    materials.preload();\r\n                                    new THREE.OBJLoader()\r\n                                        .setMaterials(materials)\r\n                                        .load(\\`\\${modelFiles[i]}.obj\\`, function (group) {\r\n                                            let mesh0 = group.children[0];\r\n                                            mesh0.material.side = THREE.DoubleSide;\r\n                                            mesh0.scale.set(0.05, 0.05, 0.05);\r\n\r\n                                            mesh0.rotation.set(Math.PI / -2, 0, 0);\r\n    \r\n                                            markerRoots[i].add(mesh0);\r\n    \r\n                                        }, onProgress, onError);\r\n                                });\r\n                            break;\r\n                        case 'image':\r\n                            let geometry1 = new THREE.PlaneBufferGeometry(1, 1, 4, 4);\r\n                            let loader = new THREE.TextureLoader();\r\n                            let texture = loader.load(\\`\\${imageFiles[i]}\\`, render);\r\n                            let material1 = new THREE.MeshBasicMaterial({ map: texture, side: THREE.DoubleSide });\r\n    \r\n                            mesh1 = new THREE.Mesh(geometry1, material1);\r\n                            mesh1.rotation.x = -Math.PI / 2;\r\n                            markerRoots[i].add(mesh1);\r\n                            break;\r\n                        case 'video':\r\n                            let geometry2 = new THREE.PlaneBufferGeometry(2, 2, 4, 4);\r\n    \r\n                            let video = document.createElement('video');\r\n                            video.src = \\`\\${videoFiles[i]}\\`;\r\n                            if (repeatOptions[i]) {\r\n                                video.addEventListener('ended', () => {\r\n                                    video.play();\r\n                                })\r\n                            }\r\n                            audioContent.push(video);\r\n                            let texture2 = new THREE.VideoTexture(video);\r\n                            texture2.minFilter = THREE.LinearFilter;\r\n                            texture2.magFilter = THREE.LinearFilter;\r\n                            texture2.format = THREE.RGBFormat;\r\n                            let material2 = new THREE.MeshBasicMaterial({ map: texture2 });\r\n    \r\n                            mesh2 = new THREE.Mesh(geometry2, material2);\r\n                            mesh2.rotation.x = -Math.PI / 2;\r\n    \r\n                            markerRoots[i].add(mesh2);\r\n                            break;\r\n                        default:\r\n                            let mesh = new THREE.Mesh(\r\n                                new THREE.CubeGeometry(1, 1, 1),\r\n                                new THREE.MeshBasicMaterial({ color: 'red', transparent: true, opacity: 0.5 })\r\n                            );\r\n                            mesh.position.y = 0.5;\r\n                            markerRoots[i].add(mesh);\r\n                            break;\r\n                    }\r\n    \r\n    \r\n                    if (audioFiles[i]) {\r\n                        const listener = new THREE.AudioListener();\r\n                        camera.add(listener);\r\n                        // create a global audio source\r\n                        const sound = new THREE.Audio(listener);\r\n                        audioContent.push(sound);\r\n                        // load a sound and set it as the Audio object's buffer\r\n                        const audioLoader = new THREE.AudioLoader();\r\n                        audioLoader.load(\\`\\${audioFiles[i]}\\`, function (buffer) {\r\n                            sound.setBuffer(buffer);\r\n                            if (repeatOptions[i]) {\r\n                                sound.setLoop(true);\r\n                            }\r\n                            sound.setVolume(0.5);\r\n                        });\r\n                    }\r\n                }\r\n    \r\n                scene.add(mainContainer);\r\n            }\r\n    \r\n            function update() {\r\n                // update artoolkit on every frame\r\n                if (arToolkitSource.ready !== false) {\r\n                    arToolkitContext.update(arToolkitSource.domElement);\r\n                }\r\n            }\r\n    \r\n            function render() {\r\n                renderer.render(scene, camera);\r\n            }\r\n    \r\n    \r\n            function animate(time) {\r\n                requestAnimationFrame(animate);\r\n                deltaTime = clock.getDelta();\r\n                totalTime += deltaTime;\r\n                update();\r\n                render();\r\n            }\r\n\r\n            \r\n            const playAudioContent = () => {\r\n                window.removeEventListener('touchstart', playAudioContent);\r\n                for (let i = 0; i < audioContent.length; i++) {\r\n                    audioContent[i].play();\r\n                }\r\n            };\r\n            window.addEventListener('touchstart', playAudioContent)\r\n    \r\n        </script>\r\n    \r\n    </body>\r\n    \r\n    </html>\r\n  `,\r\n];\r\n\r\nexport { outputHTMLConfig };\r\n","import { outputHTMLConfig } from \"./output\";\r\n\r\ninterface Data {\r\n  pattern: string;\r\n  barcode: number;\r\n  mode: string;\r\n  model: string;\r\n  sound: string;\r\n  image: string;\r\n  video: string;\r\n  repeat: string;\r\n}\r\n\r\nclass InputManager {\r\n  private prepared: boolean;\r\n  private patterns: Array<string>;\r\n  private barcodes: Array<number>;\r\n\r\n  private data: Array<Data>;\r\n  private output: string;\r\n\r\n  constructor() {\r\n    this.prepared = true;\r\n    this.patterns = [];\r\n    this.barcodes = [];\r\n\r\n    this.data = [];\r\n    this.output = outputHTMLConfig[0];\r\n  }\r\n\r\n  addPattern(pattern: any) {\r\n    if (isNaN(pattern)) {\r\n      this.patterns.push(pattern);\r\n      this.barcodes.push(-1);\r\n    } else {\r\n      this.patterns.push(\"\");\r\n      this.barcodes.push(pattern);\r\n    }\r\n  }\r\n\r\n  public get getPatterns() {\r\n    return this.patterns;\r\n  }\r\n\r\n  public get codePrepared() {\r\n    return this.prepared;\r\n  }\r\n\r\n  public get outputHTML() {\r\n    return this.output;\r\n  }\r\n\r\n  public updateData(updateType: string, newContent: string, id: number) {\r\n    switch (updateType) {\r\n      case \"mode\":\r\n        this.data[id].mode = newContent;\r\n        break;\r\n      case \"repeat\":\r\n        this.data[id].repeat = newContent;\r\n        break;\r\n      case \"model\":\r\n        let modifiedContent = newContent.slice(0, -4);\r\n        this.data[id].model = modifiedContent;\r\n        break;\r\n      case \"sound\":\r\n        this.data[id].sound = newContent;\r\n        break;\r\n      case \"video\":\r\n        this.data[id].video = newContent;\r\n        break;\r\n      case \"image\":\r\n        this.data[id].image = newContent;\r\n        break;\r\n    }\r\n  }\r\n\r\n  public getBarcode(index: number) {\r\n    return this.barcodes[index];\r\n  }\r\n\r\n  public prepareData() {\r\n    for (let i = 0; i < this.getPatterns.length; i++) {\r\n      this.data.push({\r\n        pattern: this.patterns[i],\r\n        barcode: this.barcodes[i],\r\n        mode: \"image\",\r\n        model: \"\",\r\n        sound: \"\",\r\n        image: \"\",\r\n        video: \"\",\r\n        repeat: \"false\",\r\n      });\r\n    }\r\n  }\r\n\r\n  public compileData() {\r\n    let patternNames = \"\";\r\n    let barcodes = \"\";\r\n    let modes = \"\";\r\n    let modelFiles = \"\";\r\n    let imageFiles = \"\";\r\n    let videoFiles = \"\";\r\n    let audioFiles = \"\";\r\n    let repeatOptions = \"\";\r\n\r\n    this.data.forEach((element, index) => {\r\n      if (index !== this.data.length - 1) {\r\n        patternNames += `\\\"${element.pattern}\\\" ,`;\r\n        barcodes += `${element.barcode} ,`;\r\n        modes += `\\\"${element.mode}\\\" ,`;\r\n        modelFiles += `\\\"${element.model}\\\" ,`;\r\n        imageFiles += `\\\"${element.image}\\\" ,`;\r\n        videoFiles += `\\\"${element.video}\\\" ,`;\r\n        audioFiles += `\\\"${element.sound}\\\" ,`;\r\n        repeatOptions += `\\\"${element.repeat}\\\" ,`;\r\n      } else {\r\n        patternNames += `\\\"${element.pattern}\\\"`;\r\n        barcodes += `${element.barcode}`;\r\n        modes += `\\\"${element.mode}\\\"`;\r\n        modelFiles += `\\\"${element.model}\\\"`;\r\n        imageFiles += `\\\"${element.image}\\\"`;\r\n        videoFiles += `\\\"${element.video}\\\"`;\r\n        audioFiles += `\\\"${element.sound}\\\"`;\r\n        repeatOptions += `\\\"${element.repeat}\\\"`;\r\n      }\r\n    });\r\n\r\n    this.output +=\r\n      patternNames +\r\n      outputHTMLConfig[1] +\r\n      barcodes +\r\n      outputHTMLConfig[2] +\r\n      modes +\r\n      outputHTMLConfig[3] +\r\n      modelFiles +\r\n      outputHTMLConfig[4] +\r\n      imageFiles +\r\n      outputHTMLConfig[5] +\r\n      videoFiles +\r\n      outputHTMLConfig[6] +\r\n      audioFiles +\r\n      outputHTMLConfig[7] +\r\n      repeatOptions +\r\n      outputHTMLConfig[8] +\r\n      `${this.getPatterns.length}` +\r\n      outputHTMLConfig[9] +\r\n      `${this.getPatterns.length}` +\r\n      outputHTMLConfig[10];\r\n\r\n    return this.output;\r\n  }\r\n}\r\n\r\nconst inputManager = new InputManager();\r\nexport default inputManager;\r\n","import { useEffect } from \"react\";\r\nimport inputManager from \"../ts/InputManager\";\r\n\r\nexport default function Final() {\r\n  useEffect(() => {\r\n    const finalOutput = document.getElementById(\"finalOutput\");\r\n    const code = inputManager.compileData();\r\n    finalOutput.innerText = code;\r\n  });\r\n\r\n  return (\r\n    <div className=\"final-output\">\r\n      <b>Згенерований код для вашої програми:</b>\r\n      <br></br>\r\n      <br></br>\r\n      {/* <button onClick={copyCode}>Copy text</button> */}\r\n      <div id=\"finalOutput\" style={{ whiteSpace: \"pre\" }}></div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nclass Footer extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"footer\">\r\n        <div className=\"alert alert-dismissible alert-info\">\r\n          <h4>Підготуйте свої файли</h4>\r\n          <ul>\r\n            <li>\r\n              .patt - шаблон маркеру, який ви можете створити за{\" \"}\r\n              <b>\r\n                <a\r\n                  href=\"https://jeromeetienne.github.io/AR.js/three.js/examples/marker-training/examples/generator.html\"\r\n                  target=\"_blank\"\r\n                >\r\n                  цим посиланням\r\n                </a>\r\n              </b>\r\n              . Переконайтеся, що встановлено \"Pattern Ration 0.90\".\r\n            </li>\r\n            <li>\r\n              .mtl .obj - модель. Обидва файли повинні бути правильно\r\n              підготовлені з їх текстурою.\r\n            </li>\r\n          </ul>\r\n          <h4>Робота з генератором</h4>\r\n          <ol>\r\n            <li>\r\n              Знайдiть шаблони на вашому компьютери,яки ви будете\r\n              використовувати у своєму проекті. Це створить таблицю, яку ви\r\n              зможете використовувати для введення інших файлів вашого проекту.\r\n              <br></br>\r\n            </li>\r\n            <li>\r\n              Після натискання кнопки \"Підтвердити\" ви можете вибрати, який тип\r\n              вмісту буде пов’язаний з кожним шаблоном.<br></br>\r\n            </li>\r\n            <li>\r\n              Для одного шаблону ви можете вибрати модель, відео чи зображення з\r\n              одним аудіофайлом для кожного шаблону.\r\n            </li>\r\n            <li>\r\n              Після завершень заповнення таблиці натисніть на кнопку\r\n              \"Підтвердити\" щоб отримати код для вашої сцени.\r\n            </li>\r\n          </ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","import React, { Component } from \"react\";\r\nimport inputManager from \"../../ts/InputManager\";\r\n\r\nexport default class PatternList extends Component {\r\n  state = {\r\n    patternListValues: Array(),\r\n    patternId: 0,\r\n  };\r\n\r\n  constructor(props: {}) {\r\n    super(props);\r\n    this.onInput = this.onInput.bind(this);\r\n    this.onChange = this.onChange.bind(this);\r\n  }\r\n\r\n  onInput(event: any) {\r\n    event.preventDefault();\r\n    if (!event.target.files[0]) return;\r\n    const name: string = event.target.files[0].name;\r\n    inputManager.addPattern(name);\r\n    const newElem = React.createElement(\r\n      \"li\",\r\n      {\r\n        className:\r\n          \"list-group-item d-flex justify-content-between align-items-center\",\r\n        key: this.state.patternId,\r\n      },\r\n      name\r\n    );\r\n    this.setState({ patternId: this.state.patternId++ });\r\n    this.state.patternListValues.push(newElem);\r\n    this.setState({ patternListValues: this.state.patternListValues });\r\n  }\r\n\r\n  onChange(event: any) {\r\n    event.preventDefault();\r\n    const code = event.target.value;\r\n    inputManager.addPattern(code);\r\n    const newElem = React.createElement(\r\n      \"li\",\r\n      {\r\n        className:\r\n          \"list-group-item d-flex justify-content-between align-items-center\",\r\n        key: this.state.patternId,\r\n      },\r\n      \"Баркод під кодом \",\r\n      code\r\n    );\r\n    this.setState({ patternId: this.state.patternId++ });\r\n    this.state.patternListValues.push(newElem);\r\n    this.setState({ patternListValues: this.state.patternListValues });\r\n  }\r\n\r\n  prepareOptions = () => {\r\n    let options = [];\r\n    for (let i = 0; i <= 63; i++) {\r\n      options.push(<option>{i}</option>);\r\n    }\r\n    return (\r\n      <div\r\n        className=\"form-group\"\r\n        style={{\r\n          marginTop: \"12px\",\r\n        }}\r\n      >\r\n        Обрати код баркоду:\r\n        <select\r\n          className=\"form-control\"\r\n          style={{ marginTop: \"12px\" }}\r\n          onChange={this.onChange}\r\n        >\r\n          {options}\r\n        </select>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"pattern-list\">\r\n        <ul className=\"list-group\">{this.state.patternListValues}</ul>\r\n        <div className=\"custom-file pattern-file-input\">\r\n          <input\r\n            type=\"file\"\r\n            className=\"custom-file-input\"\r\n            id=\"inputGroupFile02\"\r\n            onInput={this.onInput}\r\n          ></input>\r\n          <label className=\"custom-file-label\" htmlFor=\"inputGroupFile02\">\r\n            Виберіть файл\r\n          </label>\r\n          {this.prepareOptions()}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import { useState } from \"react\";\r\nimport inputManager from \"../../ts/InputManager\";\r\n\r\nexport default function TableRow(props: { name: string; id: number }) {\r\n  const [fileName, updateFileName] = useState(\"\");\r\n  const [musicfileName, updateMusicFileName] = useState(\"\");\r\n\r\n  const [fileEntered, updateFileEntered] = useState(false);\r\n  const [musicfileEntered, updateMusicFileEntered] = useState(false);\r\n\r\n  const [contentType, updateContentType] = useState(\"image\");\r\n\r\n  function onInput(e: any) {\r\n    e.preventDefault();\r\n    const filename = e.target.files[0].name;\r\n    updateFileName(filename);\r\n    updateFileEntered(true);\r\n    if (contentType === \"image\") {\r\n      inputManager.updateData(\"image\", filename, props.id);\r\n    } else if (contentType === \"video\") {\r\n      inputManager.updateData(\"video\", filename, props.id);\r\n    } else if (contentType === \"model\") {\r\n      inputManager.updateData(\"model\", filename, props.id);\r\n    }\r\n  }\r\n\r\n  function onMusicInput(e: any) {\r\n    e.preventDefault();\r\n    const filename = e.target.files[0].name;\r\n    updateMusicFileName(filename);\r\n    updateMusicFileEntered(true);\r\n    inputManager.updateData(\"sound\", filename, props.id);\r\n  }\r\n\r\n  function updateCols(newContentType: string) {\r\n    if (newContentType === \"Зображення\") {\r\n      newContentType = \"image\";\r\n    } else if (newContentType === \"Відео\") {\r\n      newContentType = \"video\";\r\n    } else if (newContentType === \"Модель\") {\r\n      newContentType = \"model\";\r\n    }\r\n    updateContentType(newContentType);\r\n    inputManager.updateData(\"mode\", newContentType, props.id);\r\n  }\r\n\r\n  function onCheckboxToggle(e: any) {\r\n    inputManager.updateData(\"repeat\", `${e.target.checked}`, props.id);\r\n  }\r\n\r\n  return (\r\n    <tr className=\"table-default\">\r\n      <td>{props.name}</td>\r\n      <td>\r\n        <select\r\n          className=\"form-control\"\r\n          onChange={(e) => updateCols(e.target.value)}\r\n        >\r\n          <option>Зображення</option>\r\n          <option>Відео</option>\r\n          <option>Модель</option>\r\n        </select>\r\n      </td>\r\n      <td>\r\n        {fileEntered ? (\r\n          fileName\r\n        ) : (\r\n          <div className=\"custom-file\">\r\n            <input\r\n              type=\"file\"\r\n              className=\"custom-file-input content-file-input\"\r\n              id=\"inputGroupFile02\"\r\n              onInput={onInput}\r\n            ></input>\r\n            <label className=\"custom-file-label\" htmlFor=\"inputGroupFile02\">\r\n              Виберіть файл\r\n            </label>\r\n          </div>\r\n        )}\r\n      </td>\r\n      <td>\r\n        {contentType !== \"video\" ? (\r\n          musicfileEntered ? (\r\n            musicfileName\r\n          ) : (\r\n            <div className=\"custom-file\">\r\n              <input\r\n                type=\"file\"\r\n                className=\"custom-file-input content-file-input\"\r\n                id=\"inputGroupFile02\"\r\n                onInput={onMusicInput}\r\n              ></input>\r\n              <label className=\"custom-file-label\" htmlFor=\"inputGroupFile02\">\r\n                Виберіть файл\r\n              </label>\r\n            </div>\r\n          )\r\n        ) : null}\r\n      </td>\r\n      <td>\r\n        <div className=\"custom-control custom-switch\">\r\n          <input\r\n            type=\"checkbox\"\r\n            className=\"custom-control-input\"\r\n            onClick={onCheckboxToggle}\r\n            id={`customSwitch${props.id}`}\r\n          ></input>\r\n          <label\r\n            className=\"custom-control-label\"\r\n            htmlFor={`customSwitch${props.id}`}\r\n          >\r\n            Перемкнути\r\n          </label>\r\n        </div>\r\n      </td>\r\n    </tr>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport inputManager from \"../../ts/InputManager\";\r\nimport TableRow from \"./TableRow\";\r\n\r\nexport default class Table extends Component {\r\n  state = {\r\n    tableRows: Array(),\r\n  };\r\n\r\n  componentDidMount() {\r\n    let i = 0;\r\n    this.state.tableRows.push(\r\n      <tr className=\"table-default\">\r\n        <td>\r\n          <b>Файл патерну</b>\r\n        </td>\r\n        <td>\r\n          <b>Тип вмісту</b>\r\n        </td>\r\n        <td>\r\n          <b>Файл вмісту</b>\r\n        </td>\r\n        <td>\r\n          <b>Звуковий файл</b>\r\n        </td>\r\n        <td>\r\n          <b>Автоматичне повторення</b>\r\n        </td>\r\n      </tr>\r\n    );\r\n    inputManager.prepareData();\r\n    inputManager.getPatterns.forEach((elem: string, index) => {\r\n      let newRow;\r\n      if (elem === \"\") {\r\n        let barcode = inputManager.getBarcode(index);\r\n        newRow = <TableRow name={`Баркод під кодом ${barcode}`} id={i} />;\r\n      } else {\r\n        newRow = <TableRow name={elem} id={i} />;\r\n      }\r\n      this.state.tableRows.push(newRow);\r\n      i++;\r\n    });\r\n    this.setState({ tableRows: this.state.tableRows });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"table-wrapper\">\r\n        <table className=\"table table-hover\">\r\n          <tbody>{this.state.tableRows}</tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport inputManager from \"../ts/InputManager\";\r\nimport Final from \"./Final\";\r\nimport Footer from \"./Footer\";\r\nimport PatternList from \"./Forms/PatternList\";\r\nimport Table from \"./Forms/Table\";\r\n\r\nclass Form extends React.Component {\r\n  state = {\r\n    stage: \"pattern\",\r\n  };\r\n\r\n  constructor(props: {}) {\r\n    super(props);\r\n    this.onClick = this.onClick.bind(this);\r\n  }\r\n\r\n  onClick() {\r\n    if (!inputManager.getPatterns.length) {\r\n      alert(\"Будь ласка хоча б один патерн чи баркод\");\r\n      return;\r\n    }\r\n    if (this.state.stage === \"pattern\") {\r\n      this.setState({ stage: \"table\" });\r\n    } else if (this.state.stage === \"table\" && inputManager.codePrepared) {\r\n      this.setState({ stage: \"final\" });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.stage === \"pattern\" ? (\r\n          <div className=\"main-pattern-instruction\">\r\n            Додайте файл патерну чи баркоду та підтвердіть:\r\n          </div>\r\n        ) : null}\r\n        {this.state.stage === \"table\" ? (\r\n          <Table />\r\n        ) : this.state.stage === \"pattern\" ? (\r\n          <PatternList />\r\n        ) : (\r\n          <Final />\r\n        )}\r\n        <div className=\"main-button\" style={{ marginTop: \"24px\" }}>\r\n          {this.state.stage === \"final\" ? null : (\r\n            <button className=\"btn btn-primary\" onClick={this.onClick}>\r\n              Підтвердити\r\n            </button>\r\n          )}\r\n        </div>\r\n\r\n        {this.state.stage === \"final\" ? null : <Footer />}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import React from \"react\";\r\nimport \"./css/bootstrap.css\";\r\nimport \"./css/main.css\";\r\nimport Header from \"./components/Header\";\r\nimport Footer from \"./components/Footer\";\r\nimport Form from \"./components/Form\";\r\nimport ProgressBar from \"./components/ProgressBar\";\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        <Form />\r\n        {/* <ProgressBar /> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}